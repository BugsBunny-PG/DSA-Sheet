 ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
          return l2;
        if(l2==NULL)
          return l1;
        while(l1->next!=NULL){
            l1->val=((l1->val)+(l2->val));
            l1=l1->next;
        }
        return l1;
    }
    
    
    
     /* Should return data of middle node. If linked list is empty, then  -1*/
    int getMiddle(Node *head)
    {
        Node* t=head;
        int count=1,i=1;
        while(t->next!=NULL){
            count++;
            t=t->next;
        }
        t=head;
        int mid=count/2;
        while(i<=mid){
            t=t->next;
            i++;
        }
        return t->data;
    }
//TC O(n)

Optimize solution
ListNode* middleNode(ListNode* head){
        if(head==NULL||head->next==NULL){
            return head;
        }
        if(head->next->next==NULL)  //2 nodes
          return head->next;
        ListNode* fast=head->next;
        ListNode* slow=head;
        while(fast!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;  //2 nodes move;
            }
            slow=slow->next;
        }
        return slow;
        }
        
        //TC=O(n/2)
